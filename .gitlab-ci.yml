image: mcr.microsoft.com/dotnet/sdk:8.0

stages:
  - build
  - test
  - sonarqube-check
  - docker-login
  - docker-build
  - docker-deploy

# Define variables
variables:
  OBJECTS_DIRECTORY: 'obj'
  NUGET_PACKAGES_DIRECTORY: '.nuget'
  SOURCE_CODE_PATH: '*/*/'
  REGISTRY.URL: 'http://192.168.1.145:15000'

# Global cache rule
cache:
  key: "$CI_JOB_STAGE-$CI_COMMIT_REF_SLUG"
  paths:
    - '$SOURCE_CODE_PATH$OBJECTS_DIRECTORY/project.assets.json'
    - '$SOURCE_CODE_PATH$OBJECTS_DIRECTORY/*.csproj.nuget.*'
    - '$NUGET_PACKAGES_DIRECTORY'
  policy: pull-push

before_script:
  - 'dotnet restore ChatBot.sln --packages $NUGET_PACKAGES_DIRECTORY'

build:
  stage: build
  script:
    - 'dotnet build ChatBot.sln -p:BuildInParallel=false -m:1 --no-restore'
  tags: win

tests:
  stage: test
  script:
    - 'dotnet test ChatBot.sln -p:BuildInParallel=false -m:1 --no-restore'

sonarqube-check:
  image: mcr.microsoft.com/dotnet/sdk:latest
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - 'dotnet tool install --global dotnet-sonarscanner'
    - 'dotnet sonarscanner begin /k:"chat-with-ai-bot" /d:sonar.login="${SONAR_TOKEN}" /d:"sonar.host.url=${SONAR_HOST_URL}"'
    - 'dotnet build ChatBot.sln -p:BuildInParallel=false -m:1 --no-restore'
    - 'dotnet sonarscanner end /d:sonar.login="${SONAR_TOKEN}"'
    - |
      $reportTaskContent = Get-Content "${CI_PROJECT_DIR}/.sonarqube/out/.sonar/report-task.txt"
      $ceTaskUrl = ($reportTaskContent | Where-Object { $_ -match "ceTaskUrl" }) -replace "ceTaskUrl=", ""
      $headers = @{"Authorization" = "Basic " + [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes("${SONAR_TOKEN}:"))}
      do {
        Start-Sleep -Seconds 5
        $ceTaskResponse = Invoke-RestMethod -Uri $ceTaskUrl -Method Get -Headers $headers
        $ceTaskStatus = $ceTaskResponse.task.status
      } while ($ceTaskStatus -eq "IN_PROGRESS" -or $ceTaskStatus -eq "PENDING")
      if ($ceTaskStatus -eq "SUCCESS") {
        $analysisId = $ceTaskResponse.task.analysisId
        $qgStatusResponse = Invoke-RestMethod -Uri "${SONAR_HOST_URL}/api/qualitygates/project_status?analysisId=$analysisId" -Method Get -Headers $headers
        $qgStatus = $qgStatusResponse.projectStatus.status
        Write-Host $qgStatus
        if ($qgStatus -eq "ERROR") {
          Write-Host "Quality Gate failed:"
          $qgStatusResponse.projectStatus.conditions | ConvertTo-Json
          exit 1
        } else {
          Write-Host "Quality Gate passed."
        }
      } else {
        Write-Host "CE Task did not complete successfully!"
        exit 1
      }
  allow_failure: false
  tags: win

docker-login:
  stage: docker-login
  image: docker:latest
  script:
    - echo ${CI_REGISTRY_PASSWORD} | docker login $REGISTRY.URL -u ${CI_REGISTRY_USER} --password-stdin
  only:
    - master
  tags: linux

docker-build:
  stage: docker-build
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker build -t $REGISTRY.URL/myproject/chatbot:$CI_COMMIT_SHA .
    - docker push $REGISTRY.URL/myproject/chatbot:$CI_COMMIT_SHA
  only:
    - master
  tags: linux

docker-deploy:
  stage: docker-deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh
  script:
    - ssh user@synology "docker login $REGISTRY.URL -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD}"
    - ssh user@synology "docker pull $REGISTRY.URL/myproject/chatbot:$CI_COMMIT_SHA"
    - ssh user@synology "docker stop chatbot || true"
    - ssh user@synology "docker rm chatbot || true"
    - ssh user@synology "docker run -d --name chatbot -p 8080:8080 -p 8081:8081 -e ASPNETCORE_ENVIRONMENT=Production $REGISTRY.URL/myproject/chatbot:$CI_COMMIT_SHA"
  only:
    - master
  tags: linux